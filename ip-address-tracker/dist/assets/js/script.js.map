{"version":3,"sources":["index.js","mapstyles.js"],"names":["addressInput","document","querySelector","submitBtn","errorMess","ipAddress","loc","timezone","isp","api_key","searchTracker","inputValue","value","trim","checkValidDomain","classList","contains","remove","ipTracker","checkValidIpv4","checkValidIpv6","innerText","add","async","getDeviceAddress","response","fetch","Error","statusText","json","typeRequest","requestQuery","replace","ok","data","innerHTML","ip","location","city","region","postalCode","getMarker","error","console","log","message","map","marker","initMap","google","maps","Map","getElementById","zoom","center","lat","lng","disableDefaultUI","styles","mapstyles","info","pos","svgMarker","path","fillOpacity","strokeWeight","rotation","scale","anchor","Point","Marker","position","icon","setCenter","test","addEventListener","e","keyCode","preventDefault","click","then","result","catch","featureType","elementType","stylers","color","visibility","saturation","lightness"],"mappings":"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","file":"script.js","sourcesContent":["const addressInput = document.querySelector('.address-input');\r\nconst submitBtn = document.querySelector('.search-btn');\r\nconst errorMess = document.querySelector('.error');\r\nconst ipAddress = document.querySelector('.ip-address');\r\nconst loc = document.querySelector('.location');\r\nconst timezone = document.querySelector('.timezone');\r\nconst isp = document.querySelector('.isp');\r\n// const api_key = IPIFY_API_KEY;\r\nconst api_key = 'at_NV6KNutm5C29wr5oS76HFrgdWcSkH';\r\n\r\nfunction searchTracker() {\r\n  let inputValue = addressInput.value.trim();\r\n  if (checkValidDomain(inputValue)) {\r\n    if (errorMess.classList.contains('visible')) {\r\n      errorMess.classList.remove('visible');\r\n    }\r\n    ipTracker(inputValue, 'domain');\r\n  } else if (checkValidIpv4(inputValue) || checkValidIpv6(inputValue)) {\r\n    if (errorMess.classList.contains('visible')) {\r\n      errorMess.classList.remove('visible');\r\n    }\r\n    ipTracker(inputValue);\r\n  } else {\r\n    errorMess.innerText = 'Please enter a valid IP';\r\n    errorMess.classList.add('visible');\r\n  }\r\n}\r\n\r\nsubmitBtn.addEventListener('click', searchTracker);\r\n// Trigger button click on Enter key\r\naddressInput.addEventListener('keyup', function (e) {\r\n  if (e.keyCode === 13) {\r\n    e.preventDefault();\r\n    submitBtn.click();\r\n  }\r\n});\r\n\r\nasync function getDeviceAddress() {\r\n  let response = await fetch(`https://api.ipify.org?format=json`);\r\n  if (!response) {\r\n    throw new Error(`HTTP error! status: ${response.statusText}`);\r\n  }\r\n  let result = await response.json();\r\n  return result;\r\n}\r\ngetDeviceAddress()\r\n  .then(result => {\r\n    let data = result.ip;\r\n    ipTracker(data);\r\n  })\r\n  .catch(error => {\r\n    console.log(error.message);\r\n  });\r\n\r\nasync function ipTracker(value, typeRequest = 'ip') {\r\n  try {\r\n    let requestQuery = 'ipAddress=' + value;\r\n    // console.log(`Search by ${typeRequest}`);\r\n    if (typeRequest === 'domain') {\r\n      requestQuery = requestQuery.replace('ipAddress', 'domain');\r\n    }\r\n    let response = await fetch(`https://geo.ipify.org/api/v1?apiKey=${api_key}&${requestQuery}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Cannot fetch the data (${response.statusText})`);\r\n    }\r\n    let data = await response.json();\r\n    ipAddress.innerHTML = data.ip;\r\n    loc.innerHTML = data.location.city + ', ' + data.location.region + ' ' + data.location.postalCode;\r\n    timezone.innerHTML = 'UTC ' + data.location.timezone;\r\n    isp.innerHTML = data.isp;\r\n    getMarker(data);\r\n    return data;\r\n  } catch (error) {\r\n    errorMess.innerText = 'Bad Request!';\r\n    errorMess.classList.add('visible');\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\n// Create Map with Google Maps API\r\n\r\nlet map, marker;\r\n\r\nfunction initMap() {\r\n  const pos = {\r\n    lat: 16.075239,\r\n    lng: 108.224136,\r\n  };\r\n  map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 15,\r\n    center: pos,\r\n    disableDefaultUI: true,\r\n    styles: mapstyles,\r\n  });\r\n}\r\n\r\nfunction getMarker(info) {\r\n  const pos = {\r\n    lat: info.location.lat,\r\n    lng: info.location.lng,\r\n  };\r\n  const svgMarker = {\r\n    path: 'M39.263 7.673c8.897 8.812 8.966 23.168.153 32.065l-.153.153L23 56 6.737 39.89C-2.16 31.079-2.23 16.723 6.584 7.826l.153-.152c9.007-8.922 23.52-8.922 32.526 0zM23 14.435c-5.211 0-9.436 4.185-9.436 9.347S17.79 33.128 23 33.128s9.436-4.184 9.436-9.346S28.21 14.435 23 14.435z',\r\n    // fillColor: 'black',\r\n    fillOpacity: 1,\r\n    strokeWeight: 0,\r\n    rotation: 0,\r\n    scale: 0.8,\r\n    anchor: new google.maps.Point(21, 46),\r\n  };\r\n  marker = new google.maps.Marker({\r\n    position: pos,\r\n    map: map,\r\n    icon: svgMarker,\r\n    // icon: '../../../src/images/icon-location.svg',\r\n  });\r\n  map.setCenter(pos);\r\n}\r\n\r\nfunction checkValidIpv4(value) {\r\n  const pattern = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\r\n  return pattern.test(value);\r\n}\r\nfunction checkValidIpv6(value) {\r\n  const pattern =\r\n    /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/;\r\n  return pattern.test(value);\r\n}\r\nfunction checkValidDomain(value) {\r\n  const pattern = /^(?!:\\/\\/)([a-zA-Z0-9-_]+\\.)*[a-zA-Z0-9][a-zA-Z0-9-_]+\\.[a-zA-Z]{2,11}?$/;\r\n  return pattern.test(value);\r\n}\r\n","const mapstyles = [\r\n  {\r\n    featureType: 'administrative',\r\n    elementType: 'labels.text.fill',\r\n    stylers: [\r\n      {\r\n        color: '#444444',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: 'landscape',\r\n    elementType: 'all',\r\n    stylers: [\r\n      {\r\n        color: '#f2f2f2',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: 'landscape',\r\n    elementType: 'labels',\r\n    stylers: [\r\n      {\r\n        visibility: 'simplified',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: 'poi',\r\n    elementType: 'all',\r\n    stylers: [\r\n      {\r\n        visibility: 'on',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: 'road',\r\n    elementType: 'all',\r\n    stylers: [\r\n      {\r\n        saturation: -100,\r\n      },\r\n      {\r\n        lightness: 45,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: 'road.highway',\r\n    elementType: 'all',\r\n    stylers: [\r\n      {\r\n        visibility: 'on',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: 'transit',\r\n    elementType: 'all',\r\n    stylers: [\r\n      {\r\n        visibility: 'off',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: 'water',\r\n    elementType: 'all',\r\n    stylers: [\r\n      {\r\n        color: '#46bcec',\r\n      },\r\n      {\r\n        visibility: 'on',\r\n      },\r\n    ],\r\n  },\r\n];\r\n"]}