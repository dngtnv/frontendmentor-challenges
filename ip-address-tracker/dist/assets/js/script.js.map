{"version":3,"sources":["index.js"],"names":["addressInput","document","querySelector","submitBtn","errorMess","ipAddress","loc","timezone","isp","api_key","marker","access_token","tileUrl","attribution","streets","L","tileLayer","id","tileSize","zoomOffset","maxZoom","light","satellite","baseMaps","Streets","Light","Satellite","mymap","map","zoomControl","center","zoom","layers","getMarker","info","pos","location","lat","lng","svgMarker","icon","iconUrl","iconAnchor","remove","addTo","setView","async","getDeviceAddress","response","fetch","Error","statusText","json","ipTracker","value","typeRequest","requestQuery","replace","ok","data","innerHTML","ip","city","region","postalCode","error","innerText","classList","add","console","log","message","searchTracker","inputValue","trim","checkValidDomain","contains","checkValidIpv4","checkValidIpv6","test","control","position","then","result","catch","addEventListener","e","keyCode","preventDefault","click"],"mappings":"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","file":"script.js","sourcesContent":["const addressInput = document.querySelector('.address-input');\r\nconst submitBtn = document.querySelector('.search-btn');\r\nconst errorMess = document.querySelector('.error');\r\nconst ipAddress = document.querySelector('.ip-address');\r\nconst loc = document.querySelector('.location');\r\nconst timezone = document.querySelector('.timezone');\r\nconst isp = document.querySelector('.isp');\r\n// const api_key = IPIFY_API_KEY;\r\nconst api_key = 'at_NV6KNutm5C29wr5oS76HFrgdWcSkH';\r\n\r\n// Setting up the map\r\nlet marker;\r\nconst access_token = 'pk.eyJ1IjoiZG5ndG52IiwiYSI6ImNrdG50enNkMzA2OGsyb251cDJhOG96M3gifQ.STmoml6KJE5KtTEceP3UDw';\r\nconst tileUrl = `https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=${access_token}`;\r\nconst attribution = '<a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> | <a href=\"https://www.mapbox.com/\">Mapbox</a>';\r\n\r\nconst streets = L.tileLayer(tileUrl, { id: 'mapbox/streets-v11', tileSize: 512, zoomOffset: -1, maxZoom: 18, attribution: attribution }),\r\n  light = L.tileLayer(tileUrl, { id: 'mapbox/light-v10', tileSize: 512, zoomOffset: -1, maxZoom: 18, attribution: attribution }),\r\n  satellite = L.tileLayer(tileUrl, { id: 'mapbox/satellite-v9', tileSize: 512, zoomOffset: -1, maxZoom: 18, attribution: attribution });\r\nconst baseMaps = {\r\n  Streets: streets,\r\n  Light: light,\r\n  Satellite: satellite,\r\n};\r\nconst mymap = L.map('map', { zoomControl: false, center: [16.075239, 108.224136], zoom: 13, layers: [streets] });\r\nL.control.layers(baseMaps, '', { position: 'bottomright' }).addTo(mymap);\r\nL.control.zoom({ position: 'bottomleft' }).addTo(mymap);\r\n\r\nfunction getMarker(info) {\r\n  const pos = [info.location.lat, info.location.lng];\r\n  const svgMarker = L.icon({\r\n    iconUrl: '../../../src/images/icon-location.svg',\r\n    iconAnchor: [23, 56],\r\n  });\r\n  if (marker) {\r\n    marker.remove();\r\n  }\r\n  marker = L.marker(pos, { icon: svgMarker });\r\n  marker.addTo(mymap);\r\n  mymap.setView(pos, 16);\r\n}\r\n\r\nasync function getDeviceAddress() {\r\n  let response = await fetch(`https://api.ipify.org?format=json`);\r\n  if (!response) {\r\n    throw new Error(`HTTP error! status: ${response.statusText}`);\r\n  }\r\n  let result = await response.json();\r\n  return result;\r\n}\r\ngetDeviceAddress()\r\n  .then(result => {\r\n    let data = result.ip;\r\n    ipTracker(data);\r\n  })\r\n  .catch(error => {\r\n    console.log(error.message);\r\n  });\r\n\r\nasync function ipTracker(value, typeRequest = 'ip') {\r\n  try {\r\n    let requestQuery = 'ipAddress=' + value;\r\n    // console.log(`Search by ${typeRequest}`);\r\n    if (typeRequest === 'domain') {\r\n      requestQuery = requestQuery.replace('ipAddress', 'domain');\r\n    }\r\n    let response = await fetch(`https://geo.ipify.org/api/v1?apiKey=${api_key}&${requestQuery}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Cannot fetch the data (${response.statusText})`);\r\n    }\r\n    let data = await response.json();\r\n    ipAddress.innerHTML = data.ip;\r\n    loc.innerHTML = data.location.city + ', ' + data.location.region + ' ' + data.location.postalCode;\r\n    timezone.innerHTML = 'UTC ' + data.location.timezone;\r\n    isp.innerHTML = data.isp;\r\n    getMarker(data);\r\n    return data;\r\n  } catch (error) {\r\n    errorMess.innerText = 'Bad Request!';\r\n    errorMess.classList.add('visible');\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nfunction searchTracker() {\r\n  let inputValue = addressInput.value.trim();\r\n  if (checkValidDomain(inputValue)) {\r\n    if (errorMess.classList.contains('visible')) {\r\n      errorMess.classList.remove('visible');\r\n    }\r\n    ipTracker(inputValue, 'domain');\r\n  } else if (checkValidIpv4(inputValue) || checkValidIpv6(inputValue)) {\r\n    if (errorMess.classList.contains('visible')) {\r\n      errorMess.classList.remove('visible');\r\n    }\r\n    ipTracker(inputValue);\r\n  } else {\r\n    errorMess.innerText = 'Please enter a valid IP';\r\n    errorMess.classList.add('visible');\r\n  }\r\n}\r\n\r\nsubmitBtn.addEventListener('click', searchTracker);\r\n\r\n// Trigger button click on Enter key\r\naddressInput.addEventListener('keyup', function (e) {\r\n  if (e.keyCode === 13) {\r\n    e.preventDefault();\r\n    submitBtn.click();\r\n  }\r\n});\r\n\r\nfunction checkValidIpv4(value) {\r\n  const pattern = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\r\n  return pattern.test(value);\r\n}\r\nfunction checkValidIpv6(value) {\r\n  const pattern =\r\n    /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/;\r\n  return pattern.test(value);\r\n}\r\nfunction checkValidDomain(value) {\r\n  const pattern = /^(?!:\\/\\/)([a-zA-Z0-9-_]+\\.)*[a-zA-Z0-9][a-zA-Z0-9-_]+\\.[a-zA-Z]{2,11}?$/;\r\n  return pattern.test(value);\r\n}\r\n"]}